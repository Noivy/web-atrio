{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PersonneService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080/api/personnes';\n    this.personnesSubject = new BehaviorSubject([]);\n    this.personnes$ = this.personnesSubject.asObservable();\n    this.rafraichirPersonnes();\n  }\n  // Fonction pour calculer l'âge à partir de la date de naissance\n  calculerAge(dateNaissance) {\n    if (!dateNaissance) return 0;\n    const dateNaissanceObj = new Date(dateNaissance);\n    const aujourdhui = new Date();\n    let age = aujourdhui.getFullYear() - dateNaissanceObj.getFullYear();\n    const mois = aujourdhui.getMonth() - dateNaissanceObj.getMonth();\n    if (mois < 0 || mois === 0 && aujourdhui.getDate() < dateNaissanceObj.getDate()) {\n      age--;\n    }\n    return age;\n  }\n  obtenirToutesPersonnes() {\n    return this.http.get(this.apiUrl).pipe(map(personnes => {\n      // Vérifier et corriger les problèmes potentiels avec l'âge\n      return personnes.map(p => {\n        console.log(`Personne ${p.nom} ${p.prenom} - Age type: ${typeof p.age}, value: ${p.age}`);\n        // S'assurer que l'âge est un nombre\n        if (p.age === undefined || p.age === null || isNaN(Number(p.age)) || Number(p.age) === 0) {\n          console.log(` - Problème avec l'âge, valeur reçue: ${p.age}, calcul à partir de dateNaissance: ${p.dateNaissance}`);\n          return {\n            ...p,\n            age: this.calculerAge(p.dateNaissance)\n          };\n        }\n        return {\n          ...p,\n          age: Number(p.age)\n        }; // Convertir en nombre si ce n'est pas déjà le cas\n      });\n    }), tap(personnes => {\n      console.log('Personnes traitées:', personnes);\n      this.personnesSubject.next(personnes);\n    }));\n  }\n  obtenirPersonneParId(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(map(personne => {\n      console.log(`Personne par ID ${id} - Age type: ${typeof personne.age}, value: ${personne.age}`);\n      // S'assurer que l'âge est un nombre\n      if (personne.age === undefined || personne.age === null || isNaN(Number(personne.age)) || Number(personne.age) === 0) {\n        console.log(` - Problème avec l'âge, valeur reçue: ${personne.age}, calcul à partir de dateNaissance: ${personne.dateNaissance}`);\n        return {\n          ...personne,\n          age: this.calculerAge(personne.dateNaissance)\n        };\n      }\n      return {\n        ...personne,\n        age: Number(personne.age)\n      }; // Convertir en nombre si ce n'est pas déjà le cas\n    }), tap(personne => {\n      console.log(`Personne récupérée par ID ${id} (après traitement):`, personne);\n      // Mettre à jour la personne dans la liste locale si elle existe\n      const personnes = this.personnesSubject.value;\n      const index = personnes.findIndex(p => p.id === id);\n      if (index !== -1) {\n        personnes[index] = personne;\n        this.personnesSubject.next([...personnes]);\n      }\n    }));\n  }\n  creerPersonne(personne) {\n    return this.http.post(this.apiUrl, personne).pipe(tap(() => this.rafraichirPersonnes()));\n  }\n  supprimerPersonne(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(tap(() => this.rafraichirPersonnes()));\n  }\n  rafraichirPersonnes() {\n    this.http.get(this.apiUrl).subscribe(personnes => {\n      // Traiter les personnes pour s'assurer que l'âge est correct\n      const personnesTraitees = personnes.map(p => {\n        console.log(`Rafraîchissement - Personne ${p.nom} ${p.prenom} - Age type: ${typeof p.age}, value: ${p.age}`);\n        // S'assurer que l'âge est un nombre\n        if (p.age === undefined || p.age === null || isNaN(Number(p.age)) || Number(p.age) === 0) {\n          console.log(` - Problème avec l'âge, valeur reçue: ${p.age}, calcul à partir de dateNaissance: ${p.dateNaissance}`);\n          return {\n            ...p,\n            age: this.calculerAge(p.dateNaissance)\n          };\n        }\n        return {\n          ...p,\n          age: Number(p.age)\n        }; // Convertir en nombre si ce n'est pas déjà le cas\n      });\n      console.log('Rafraîchissement des personnes (après traitement):', personnesTraitees);\n      this.personnesSubject.next(personnesTraitees);\n    });\n  }\n  static {\n    this.ɵfac = function PersonneService_Factory(t) {\n      return new (t || PersonneService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PersonneService,\n      factory: PersonneService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","map","PersonneService","constructor","http","apiUrl","personnesSubject","personnes$","asObservable","rafraichirPersonnes","calculerAge","dateNaissance","dateNaissanceObj","Date","aujourdhui","age","getFullYear","mois","getMonth","getDate","obtenirToutesPersonnes","get","pipe","personnes","p","console","log","nom","prenom","undefined","isNaN","Number","next","obtenirPersonneParId","id","personne","value","index","findIndex","creerPersonne","post","supprimerPersonne","delete","subscribe","personnesTraitees","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\samyl\\Desktop\\Web-Atrio-Test\\demo.webatrio-frontend\\src\\app\\services\\personne.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { tap, map } from 'rxjs/operators';\r\nimport { Personne } from '../models/personne.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PersonneService {\r\n  private apiUrl = 'http://localhost:8080/api/personnes';\r\n  private personnesSubject = new BehaviorSubject<Personne[]>([]);\r\n  public personnes$ = this.personnesSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.rafraichirPersonnes();\r\n  }\r\n\r\n  // Fonction pour calculer l'âge à partir de la date de naissance\r\n  private calculerAge(dateNaissance: string): number {\r\n    if (!dateNaissance) return 0;\r\n    \r\n    const dateNaissanceObj = new Date(dateNaissance);\r\n    const aujourdhui = new Date();\r\n    \r\n    let age = aujourdhui.getFullYear() - dateNaissanceObj.getFullYear();\r\n    const mois = aujourdhui.getMonth() - dateNaissanceObj.getMonth();\r\n    \r\n    if (mois < 0 || (mois === 0 && aujourdhui.getDate() < dateNaissanceObj.getDate())) {\r\n      age--;\r\n    }\r\n    \r\n    return age;\r\n  }\r\n\r\n  obtenirToutesPersonnes(): Observable<Personne[]> {\r\n    return this.http.get<Personne[]>(this.apiUrl)\r\n      .pipe(\r\n        map(personnes => {\r\n          // Vérifier et corriger les problèmes potentiels avec l'âge\r\n          return personnes.map(p => {\r\n            console.log(`Personne ${p.nom} ${p.prenom} - Age type: ${typeof p.age}, value: ${p.age}`);\r\n            // S'assurer que l'âge est un nombre\r\n            if (p.age === undefined || p.age === null || isNaN(Number(p.age)) || Number(p.age) === 0) {\r\n              console.log(` - Problème avec l'âge, valeur reçue: ${p.age}, calcul à partir de dateNaissance: ${p.dateNaissance}`);\r\n              return { ...p, age: this.calculerAge(p.dateNaissance) };\r\n            }\r\n            return { ...p, age: Number(p.age) }; // Convertir en nombre si ce n'est pas déjà le cas\r\n          });\r\n        }),\r\n        tap(personnes => {\r\n          console.log('Personnes traitées:', personnes);\r\n          this.personnesSubject.next(personnes);\r\n        })\r\n      );\r\n  }\r\n\r\n  obtenirPersonneParId(id: number): Observable<Personne> {\r\n    return this.http.get<Personne>(`${this.apiUrl}/${id}`)\r\n      .pipe(\r\n        map(personne => {\r\n          console.log(`Personne par ID ${id} - Age type: ${typeof personne.age}, value: ${personne.age}`);\r\n          // S'assurer que l'âge est un nombre\r\n          if (personne.age === undefined || personne.age === null || isNaN(Number(personne.age)) || Number(personne.age) === 0) {\r\n            console.log(` - Problème avec l'âge, valeur reçue: ${personne.age}, calcul à partir de dateNaissance: ${personne.dateNaissance}`);\r\n            return { ...personne, age: this.calculerAge(personne.dateNaissance) };\r\n          }\r\n          return { ...personne, age: Number(personne.age) }; // Convertir en nombre si ce n'est pas déjà le cas\r\n        }),\r\n        tap(personne => {\r\n          console.log(`Personne récupérée par ID ${id} (après traitement):`, personne);\r\n          \r\n          // Mettre à jour la personne dans la liste locale si elle existe\r\n          const personnes = this.personnesSubject.value;\r\n          const index = personnes.findIndex(p => p.id === id);\r\n          if (index !== -1) {\r\n            personnes[index] = personne;\r\n            this.personnesSubject.next([...personnes]);\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  creerPersonne(personne: Personne): Observable<any> {\r\n    return this.http.post(this.apiUrl, personne)\r\n      .pipe(tap(() => this.rafraichirPersonnes()));\r\n  }\r\n\r\n  supprimerPersonne(id: number): Observable<any> {\r\n    return this.http.delete(`${this.apiUrl}/${id}`)\r\n      .pipe(tap(() => this.rafraichirPersonnes()));\r\n  }\r\n  \r\n  rafraichirPersonnes(): void {\r\n    this.http.get<Personne[]>(this.apiUrl).subscribe(personnes => {\r\n      // Traiter les personnes pour s'assurer que l'âge est correct\r\n      const personnesTraitees = personnes.map(p => {\r\n        console.log(`Rafraîchissement - Personne ${p.nom} ${p.prenom} - Age type: ${typeof p.age}, value: ${p.age}`);\r\n        // S'assurer que l'âge est un nombre\r\n        if (p.age === undefined || p.age === null || isNaN(Number(p.age)) || Number(p.age) === 0) {\r\n          console.log(` - Problème avec l'âge, valeur reçue: ${p.age}, calcul à partir de dateNaissance: ${p.dateNaissance}`);\r\n          return { ...p, age: this.calculerAge(p.dateNaissance) };\r\n        }\r\n        return { ...p, age: Number(p.age) }; // Convertir en nombre si ce n'est pas déjà le cas\r\n      });\r\n      \r\n      console.log('Rafraîchissement des personnes (après traitement):', personnesTraitees);\r\n      this.personnesSubject.next(personnesTraitees);\r\n    });\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
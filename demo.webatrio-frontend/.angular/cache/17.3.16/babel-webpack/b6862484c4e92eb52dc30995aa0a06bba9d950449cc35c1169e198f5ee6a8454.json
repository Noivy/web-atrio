{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PersonneService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080/api/personnes';\n    this.personnesSubject = new BehaviorSubject([]);\n    this.personnes$ = this.personnesSubject.asObservable();\n    this.rafraichirPersonnes();\n  }\n  // Fonction pour calculer l'âge à partir de la date de naissance\n  calculerAge(dateNaissance) {\n    if (!dateNaissance) return 0;\n    const dateNaissanceObj = new Date(dateNaissance);\n    const aujourdhui = new Date();\n    let age = aujourdhui.getFullYear() - dateNaissanceObj.getFullYear();\n    const mois = aujourdhui.getMonth() - dateNaissanceObj.getMonth();\n    if (mois < 0 || mois === 0 && aujourdhui.getDate() < dateNaissanceObj.getDate()) {\n      age--;\n    }\n    return age;\n  }\n  obtenirToutesPersonnes() {\n    return this.http.get(this.apiUrl).pipe(map(personnes => {\n      // Vérifier et corriger les problèmes potentiels avec l'âge et emploisActuels\n      return personnes.map(p => {\n        console.log(`Personne ${p.nom} ${p.prenom} - Age type: ${typeof p.age}, value: ${p.age}`);\n        console.log(`Emplois actuels reçus: ${JSON.stringify(p.emploisActuels)}`);\n        // Créer une copie de la personne pour les modifications\n        const personneCorrigee = {\n          ...p\n        };\n        // S'assurer que l'âge est un nombre\n        if (p.age === undefined || p.age === null || isNaN(Number(p.age)) || Number(p.age) === 0) {\n          console.log(` - Problème avec l'âge, valeur reçue: ${p.age}, calcul à partir de dateNaissance: ${p.dateNaissance}`);\n          personneCorrigee.age = this.calculerAge(p.dateNaissance);\n        } else {\n          personneCorrigee.age = Number(p.age);\n        }\n        // S'assurer que emploisActuels est un tableau non-null\n        if (!Array.isArray(p.emploisActuels)) {\n          console.log(` - Problème avec emploisActuels, valeur reçue:`, p.emploisActuels);\n          personneCorrigee.emploisActuels = [];\n        }\n        return personneCorrigee;\n      });\n    }), tap(personnes => {\n      console.log('Personnes traitées (après corrections):', personnes);\n      this.personnesSubject.next(personnes);\n    }));\n  }\n  obtenirPersonneParId(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(map(personne => {\n      console.log(`Personne par ID ${id} - Age: ${personne.age}, Type: ${typeof personne.age}`);\n      console.log(`Emplois actuels reçus: ${JSON.stringify(personne.emploisActuels)}`);\n      // Créer une copie pour les modifications\n      const personneCorrigee = {\n        ...personne\n      };\n      // S'assurer que l'âge est un nombre\n      if (personne.age === undefined || personne.age === null || isNaN(Number(personne.age)) || Number(personne.age) === 0) {\n        console.log(` - Problème avec l'âge, valeur reçue: ${personne.age}, calcul à partir de dateNaissance: ${personne.dateNaissance}`);\n        personneCorrigee.age = this.calculerAge(personne.dateNaissance);\n      } else {\n        personneCorrigee.age = Number(personne.age);\n      }\n      // S'assurer que emploisActuels est un tableau non-null\n      if (!Array.isArray(personne.emploisActuels)) {\n        console.log(` - Problème avec emploisActuels, valeur reçue:`, personne.emploisActuels);\n        personneCorrigee.emploisActuels = [];\n      } else if (personne.emploisActuels && personne.emploisActuels.length > 0) {\n        console.log(` - Nombre d'emplois actuels: ${personne.emploisActuels.length}`);\n        personne.emploisActuels.forEach((emploi, index) => {\n          console.log(`   Emploi ${index + 1}: ${emploi.titrePoste} chez ${emploi.nomEntreprise}`);\n        });\n      }\n      return personneCorrigee;\n    }), tap(personne => {\n      console.log(`Personne récupérée par ID ${id} (après traitement):`, personne);\n      // Mettre à jour la personne dans la liste locale si elle existe\n      const personnes = this.personnesSubject.value;\n      const index = personnes.findIndex(p => p.id === id);\n      if (index !== -1) {\n        personnes[index] = personne;\n        this.personnesSubject.next([...personnes]);\n      }\n    }));\n  }\n  creerPersonne(personne) {\n    return this.http.post(this.apiUrl, personne).pipe(tap(() => this.rafraichirPersonnes()));\n  }\n  supprimerPersonne(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(tap(() => this.rafraichirPersonnes()));\n  }\n  rafraichirPersonnes() {\n    this.http.get(this.apiUrl).subscribe({\n      next: personnes => {\n        // Traiter les personnes pour s'assurer que l'âge et emploisActuels sont corrects\n        const personnesTraitees = personnes.map(p => {\n          console.log(`Rafraîchissement - Personne ${p.nom} ${p.prenom} - Age: ${p.age}`);\n          console.log(`Emplois actuels reçus: ${JSON.stringify(p.emploisActuels)}`);\n          // Créer une copie pour les modifications\n          const personneCorrigee = {\n            ...p\n          };\n          // S'assurer que l'âge est un nombre\n          if (p.age === undefined || p.age === null || isNaN(Number(p.age)) || Number(p.age) === 0) {\n            console.log(` - Problème avec l'âge, valeur reçue: ${p.age}, calcul à partir de dateNaissance: ${p.dateNaissance}`);\n            personneCorrigee.age = this.calculerAge(p.dateNaissance);\n          } else {\n            personneCorrigee.age = Number(p.age);\n          }\n          // S'assurer que emploisActuels est un tableau non-null\n          if (!Array.isArray(p.emploisActuels)) {\n            console.log(` - Problème avec emploisActuels, valeur reçue:`, p.emploisActuels);\n            personneCorrigee.emploisActuels = [];\n          } else if (p.emploisActuels && p.emploisActuels.length > 0) {\n            console.log(` - Nombre d'emplois actuels: ${p.emploisActuels.length}`);\n          }\n          return personneCorrigee;\n        });\n        console.log('Rafraîchissement des personnes (après traitement):', personnesTraitees);\n        this.personnesSubject.next(personnesTraitees);\n      },\n      error: err => {\n        console.error('Erreur lors du rafraîchissement des personnes:', err);\n      }\n    });\n  }\n  static {\n    this.ɵfac = function PersonneService_Factory(t) {\n      return new (t || PersonneService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PersonneService,\n      factory: PersonneService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","map","PersonneService","constructor","http","apiUrl","personnesSubject","personnes$","asObservable","rafraichirPersonnes","calculerAge","dateNaissance","dateNaissanceObj","Date","aujourdhui","age","getFullYear","mois","getMonth","getDate","obtenirToutesPersonnes","get","pipe","personnes","p","console","log","nom","prenom","JSON","stringify","emploisActuels","personneCorrigee","undefined","isNaN","Number","Array","isArray","next","obtenirPersonneParId","id","personne","length","forEach","emploi","index","titrePoste","nomEntreprise","value","findIndex","creerPersonne","post","supprimerPersonne","delete","subscribe","personnesTraitees","error","err","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\samyl\\Desktop\\Web-Atrio-Test\\demo.webatrio-frontend\\src\\app\\services\\personne.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { tap, map } from 'rxjs/operators';\r\nimport { Personne } from '../models/personne.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PersonneService {\r\n  private apiUrl = 'http://localhost:8080/api/personnes';\r\n  private personnesSubject = new BehaviorSubject<Personne[]>([]);\r\n  public personnes$ = this.personnesSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.rafraichirPersonnes();\r\n  }\r\n\r\n  // Fonction pour calculer l'âge à partir de la date de naissance\r\n  private calculerAge(dateNaissance: string): number {\r\n    if (!dateNaissance) return 0;\r\n    \r\n    const dateNaissanceObj = new Date(dateNaissance);\r\n    const aujourdhui = new Date();\r\n    \r\n    let age = aujourdhui.getFullYear() - dateNaissanceObj.getFullYear();\r\n    const mois = aujourdhui.getMonth() - dateNaissanceObj.getMonth();\r\n    \r\n    if (mois < 0 || (mois === 0 && aujourdhui.getDate() < dateNaissanceObj.getDate())) {\r\n      age--;\r\n    }\r\n    \r\n    return age;\r\n  }\r\n\r\n  obtenirToutesPersonnes(): Observable<Personne[]> {\r\n    return this.http.get<Personne[]>(this.apiUrl)\r\n      .pipe(\r\n        map(personnes => {\r\n          // Vérifier et corriger les problèmes potentiels avec l'âge et emploisActuels\r\n          return personnes.map(p => {\r\n            console.log(`Personne ${p.nom} ${p.prenom} - Age type: ${typeof p.age}, value: ${p.age}`);\r\n            console.log(`Emplois actuels reçus: ${JSON.stringify(p.emploisActuels)}`);\r\n            \r\n            // Créer une copie de la personne pour les modifications\r\n            const personneCorrigee: Personne = { ...p };\r\n            \r\n            // S'assurer que l'âge est un nombre\r\n            if (p.age === undefined || p.age === null || isNaN(Number(p.age)) || Number(p.age) === 0) {\r\n              console.log(` - Problème avec l'âge, valeur reçue: ${p.age}, calcul à partir de dateNaissance: ${p.dateNaissance}`);\r\n              personneCorrigee.age = this.calculerAge(p.dateNaissance);\r\n            } else {\r\n              personneCorrigee.age = Number(p.age);\r\n            }\r\n            \r\n            // S'assurer que emploisActuels est un tableau non-null\r\n            if (!Array.isArray(p.emploisActuels)) {\r\n              console.log(` - Problème avec emploisActuels, valeur reçue:`, p.emploisActuels);\r\n              personneCorrigee.emploisActuels = [];\r\n            }\r\n            \r\n            return personneCorrigee;\r\n          });\r\n        }),\r\n        tap(personnes => {\r\n          console.log('Personnes traitées (après corrections):', personnes);\r\n          this.personnesSubject.next(personnes);\r\n        })\r\n      );\r\n  }\r\n\r\n  obtenirPersonneParId(id: number): Observable<Personne> {\r\n    return this.http.get<Personne>(`${this.apiUrl}/${id}`)\r\n      .pipe(\r\n        map(personne => {\r\n          console.log(`Personne par ID ${id} - Age: ${personne.age}, Type: ${typeof personne.age}`);\r\n          console.log(`Emplois actuels reçus: ${JSON.stringify(personne.emploisActuels)}`);\r\n          \r\n          // Créer une copie pour les modifications\r\n          const personneCorrigee: Personne = { ...personne };\r\n          \r\n          // S'assurer que l'âge est un nombre\r\n          if (personne.age === undefined || personne.age === null || isNaN(Number(personne.age)) || Number(personne.age) === 0) {\r\n            console.log(` - Problème avec l'âge, valeur reçue: ${personne.age}, calcul à partir de dateNaissance: ${personne.dateNaissance}`);\r\n            personneCorrigee.age = this.calculerAge(personne.dateNaissance);\r\n          } else {\r\n            personneCorrigee.age = Number(personne.age);\r\n          }\r\n          \r\n          // S'assurer que emploisActuels est un tableau non-null\r\n          if (!Array.isArray(personne.emploisActuels)) {\r\n            console.log(` - Problème avec emploisActuels, valeur reçue:`, personne.emploisActuels);\r\n            personneCorrigee.emploisActuels = [];\r\n          } else if (personne.emploisActuels && personne.emploisActuels.length > 0) {\r\n            console.log(` - Nombre d'emplois actuels: ${personne.emploisActuels.length}`);\r\n            personne.emploisActuels.forEach((emploi, index) => {\r\n              console.log(`   Emploi ${index + 1}: ${emploi.titrePoste} chez ${emploi.nomEntreprise}`);\r\n            });\r\n          }\r\n          \r\n          return personneCorrigee;\r\n        }),\r\n        tap(personne => {\r\n          console.log(`Personne récupérée par ID ${id} (après traitement):`, personne);\r\n          \r\n          // Mettre à jour la personne dans la liste locale si elle existe\r\n          const personnes = this.personnesSubject.value;\r\n          const index = personnes.findIndex(p => p.id === id);\r\n          if (index !== -1) {\r\n            personnes[index] = personne;\r\n            this.personnesSubject.next([...personnes]);\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  creerPersonne(personne: Personne): Observable<any> {\r\n    return this.http.post(this.apiUrl, personne)\r\n      .pipe(tap(() => this.rafraichirPersonnes()));\r\n  }\r\n\r\n  supprimerPersonne(id: number): Observable<any> {\r\n    return this.http.delete(`${this.apiUrl}/${id}`)\r\n      .pipe(tap(() => this.rafraichirPersonnes()));\r\n  }\r\n  \r\n  rafraichirPersonnes(): void {\r\n    this.http.get<Personne[]>(this.apiUrl).subscribe({\r\n      next: (personnes) => {\r\n        // Traiter les personnes pour s'assurer que l'âge et emploisActuels sont corrects\r\n        const personnesTraitees = personnes.map(p => {\r\n          console.log(`Rafraîchissement - Personne ${p.nom} ${p.prenom} - Age: ${p.age}`);\r\n          console.log(`Emplois actuels reçus: ${JSON.stringify(p.emploisActuels)}`);\r\n          \r\n          // Créer une copie pour les modifications\r\n          const personneCorrigee: Personne = { ...p };\r\n          \r\n          // S'assurer que l'âge est un nombre\r\n          if (p.age === undefined || p.age === null || isNaN(Number(p.age)) || Number(p.age) === 0) {\r\n            console.log(` - Problème avec l'âge, valeur reçue: ${p.age}, calcul à partir de dateNaissance: ${p.dateNaissance}`);\r\n            personneCorrigee.age = this.calculerAge(p.dateNaissance);\r\n          } else {\r\n            personneCorrigee.age = Number(p.age);\r\n          }\r\n          \r\n          // S'assurer que emploisActuels est un tableau non-null\r\n          if (!Array.isArray(p.emploisActuels)) {\r\n            console.log(` - Problème avec emploisActuels, valeur reçue:`, p.emploisActuels);\r\n            personneCorrigee.emploisActuels = [];\r\n          } else if (p.emploisActuels && p.emploisActuels.length > 0) {\r\n            console.log(` - Nombre d'emplois actuels: ${p.emploisActuels.length}`);\r\n          }\r\n          \r\n          return personneCorrigee;\r\n        });\r\n        \r\n        console.log('Rafraîchissement des personnes (après traitement):', personnesTraitees);\r\n        this.personnesSubject.next(personnesTraitees);\r\n      },\r\n      error: (err) => {\r\n        console.error('Erreur lors du rafraîchissement des personnes:', err);\r\n      }\r\n    });\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PersonneService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080/api/personnes';\n    this.personnesSubject = new BehaviorSubject([]);\n    this.personnes$ = this.personnesSubject.asObservable();\n    this.rafraichirPersonnes();\n  }\n  obtenirToutesPersonnes() {\n    return this.http.get(this.apiUrl).pipe(map(personnes => {\n      // Vérifier et corriger les problèmes potentiels avec l'âge\n      return personnes.map(p => {\n        console.log(`Personne ${p.nom} ${p.prenom} - Age type: ${typeof p.age}, value: ${p.age}`);\n        // S'assurer que l'âge est un nombre\n        if (p.age === undefined || p.age === null || isNaN(Number(p.age))) {\n          console.log(` - Problème avec l'âge, valeur reçue: ${p.age}`);\n          return {\n            ...p,\n            age: 0\n          }; // Valeur par défaut\n        }\n        return {\n          ...p,\n          age: Number(p.age)\n        }; // Convertir en nombre si ce n'est pas déjà le cas\n      });\n    }), tap(personnes => {\n      console.log('Personnes traitées:', personnes);\n      this.personnesSubject.next(personnes);\n    }));\n  }\n  obtenirPersonneParId(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(map(personne => {\n      console.log(`Personne par ID ${id} - Age type: ${typeof personne.age}, value: ${personne.age}`);\n      // S'assurer que l'âge est un nombre\n      if (personne.age === undefined || personne.age === null || isNaN(Number(personne.age))) {\n        console.log(` - Problème avec l'âge, valeur reçue: ${personne.age}`);\n        return {\n          ...personne,\n          age: 0\n        }; // Valeur par défaut\n      }\n      return {\n        ...personne,\n        age: Number(personne.age)\n      }; // Convertir en nombre si ce n'est pas déjà le cas\n    }), tap(personne => {\n      console.log(`Personne récupérée par ID ${id} (après traitement):`, personne);\n      // Mettre à jour la personne dans la liste locale si elle existe\n      const personnes = this.personnesSubject.value;\n      const index = personnes.findIndex(p => p.id === id);\n      if (index !== -1) {\n        personnes[index] = personne;\n        this.personnesSubject.next([...personnes]);\n      }\n    }));\n  }\n  creerPersonne(personne) {\n    return this.http.post(this.apiUrl, personne).pipe(tap(() => this.rafraichirPersonnes()));\n  }\n  supprimerPersonne(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(tap(() => this.rafraichirPersonnes()));\n  }\n  rafraichirPersonnes() {\n    this.http.get(this.apiUrl).subscribe(personnes => {\n      // Traiter les personnes pour s'assurer que l'âge est correct\n      const personnesTraitees = personnes.map(p => {\n        console.log(`Rafraîchissement - Personne ${p.nom} ${p.prenom} - Age type: ${typeof p.age}, value: ${p.age}`);\n        // S'assurer que l'âge est un nombre\n        if (p.age === undefined || p.age === null || isNaN(Number(p.age))) {\n          console.log(` - Problème avec l'âge, valeur reçue: ${p.age}`);\n          return {\n            ...p,\n            age: 0\n          }; // Valeur par défaut\n        }\n        return {\n          ...p,\n          age: Number(p.age)\n        }; // Convertir en nombre si ce n'est pas déjà le cas\n      });\n      console.log('Rafraîchissement des personnes (après traitement):', personnesTraitees);\n      this.personnesSubject.next(personnesTraitees);\n    });\n  }\n  static {\n    this.ɵfac = function PersonneService_Factory(t) {\n      return new (t || PersonneService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PersonneService,\n      factory: PersonneService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","map","PersonneService","constructor","http","apiUrl","personnesSubject","personnes$","asObservable","rafraichirPersonnes","obtenirToutesPersonnes","get","pipe","personnes","p","console","log","nom","prenom","age","undefined","isNaN","Number","next","obtenirPersonneParId","id","personne","value","index","findIndex","creerPersonne","post","supprimerPersonne","delete","subscribe","personnesTraitees","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\samyl\\Desktop\\Web-Atrio-Test\\demo.webatrio-frontend\\src\\app\\services\\personne.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { tap, map } from 'rxjs/operators';\r\nimport { Personne } from '../models/personne.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PersonneService {\r\n  private apiUrl = 'http://localhost:8080/api/personnes';\r\n  private personnesSubject = new BehaviorSubject<Personne[]>([]);\r\n  public personnes$ = this.personnesSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.rafraichirPersonnes();\r\n  }\r\n\r\n  obtenirToutesPersonnes(): Observable<Personne[]> {\r\n    return this.http.get<Personne[]>(this.apiUrl)\r\n      .pipe(\r\n        map(personnes => {\r\n          // Vérifier et corriger les problèmes potentiels avec l'âge\r\n          return personnes.map(p => {\r\n            console.log(`Personne ${p.nom} ${p.prenom} - Age type: ${typeof p.age}, value: ${p.age}`);\r\n            // S'assurer que l'âge est un nombre\r\n            if (p.age === undefined || p.age === null || isNaN(Number(p.age))) {\r\n              console.log(` - Problème avec l'âge, valeur reçue: ${p.age}`);\r\n              return { ...p, age: 0 }; // Valeur par défaut\r\n            }\r\n            return { ...p, age: Number(p.age) }; // Convertir en nombre si ce n'est pas déjà le cas\r\n          });\r\n        }),\r\n        tap(personnes => {\r\n          console.log('Personnes traitées:', personnes);\r\n          this.personnesSubject.next(personnes);\r\n        })\r\n      );\r\n  }\r\n\r\n  obtenirPersonneParId(id: number): Observable<Personne> {\r\n    return this.http.get<Personne>(`${this.apiUrl}/${id}`)\r\n      .pipe(\r\n        map(personne => {\r\n          console.log(`Personne par ID ${id} - Age type: ${typeof personne.age}, value: ${personne.age}`);\r\n          // S'assurer que l'âge est un nombre\r\n          if (personne.age === undefined || personne.age === null || isNaN(Number(personne.age))) {\r\n            console.log(` - Problème avec l'âge, valeur reçue: ${personne.age}`);\r\n            return { ...personne, age: 0 }; // Valeur par défaut\r\n          }\r\n          return { ...personne, age: Number(personne.age) }; // Convertir en nombre si ce n'est pas déjà le cas\r\n        }),\r\n        tap(personne => {\r\n          console.log(`Personne récupérée par ID ${id} (après traitement):`, personne);\r\n          \r\n          // Mettre à jour la personne dans la liste locale si elle existe\r\n          const personnes = this.personnesSubject.value;\r\n          const index = personnes.findIndex(p => p.id === id);\r\n          if (index !== -1) {\r\n            personnes[index] = personne;\r\n            this.personnesSubject.next([...personnes]);\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  creerPersonne(personne: Personne): Observable<any> {\r\n    return this.http.post(this.apiUrl, personne)\r\n      .pipe(tap(() => this.rafraichirPersonnes()));\r\n  }\r\n\r\n  supprimerPersonne(id: number): Observable<any> {\r\n    return this.http.delete(`${this.apiUrl}/${id}`)\r\n      .pipe(tap(() => this.rafraichirPersonnes()));\r\n  }\r\n  \r\n  rafraichirPersonnes(): void {\r\n    this.http.get<Personne[]>(this.apiUrl).subscribe(personnes => {\r\n      // Traiter les personnes pour s'assurer que l'âge est correct\r\n      const personnesTraitees = personnes.map(p => {\r\n        console.log(`Rafraîchissement - Personne ${p.nom} ${p.prenom} - Age type: ${typeof p.age}, value: ${p.age}`);\r\n        // S'assurer que l'âge est un nombre\r\n        if (p.age === undefined || p.age === null || isNaN(Number(p.age))) {\r\n          console.log(` - Problème avec l'âge, valeur reçue: ${p.age}`);\r\n          return { ...p, age: 0 }; // Valeur par défaut\r\n        }\r\n        return { ...p, age: Number(p.age) }; // Convertir en nombre si ce n'est pas déjà le cas\r\n      });\r\n      \r\n      console.log('Rafraîchissement des personnes (après traitement):', personnesTraitees);\r\n      this.personnesSubject.next(personnesTraitees);\r\n    });\r\n  }\r\n} "],"mappings":"AAEA,SAAqBA,eAAe,QAAQ,MAAM;AAClD,SAASC,GAAG,EAAEC,GAAG,QAAQ,gBAAgB;;;AAMzC,OAAM,MAAOC,eAAe;EAK1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJhB,KAAAC,MAAM,GAAG,qCAAqC;IAC9C,KAAAC,gBAAgB,GAAG,IAAIP,eAAe,CAAa,EAAE,CAAC;IACvD,KAAAQ,UAAU,GAAG,IAAI,CAACD,gBAAgB,CAACE,YAAY,EAAE;IAGtD,IAAI,CAACC,mBAAmB,EAAE;EAC5B;EAEAC,sBAAsBA,CAAA;IACpB,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAa,IAAI,CAACN,MAAM,CAAC,CAC1CO,IAAI,CACHX,GAAG,CAACY,SAAS,IAAG;MACd;MACA,OAAOA,SAAS,CAACZ,GAAG,CAACa,CAAC,IAAG;QACvBC,OAAO,CAACC,GAAG,CAAC,YAAYF,CAAC,CAACG,GAAG,IAAIH,CAAC,CAACI,MAAM,gBAAgB,OAAOJ,CAAC,CAACK,GAAG,YAAYL,CAAC,CAACK,GAAG,EAAE,CAAC;QACzF;QACA,IAAIL,CAAC,CAACK,GAAG,KAAKC,SAAS,IAAIN,CAAC,CAACK,GAAG,KAAK,IAAI,IAAIE,KAAK,CAACC,MAAM,CAACR,CAAC,CAACK,GAAG,CAAC,CAAC,EAAE;UACjEJ,OAAO,CAACC,GAAG,CAAC,yCAAyCF,CAAC,CAACK,GAAG,EAAE,CAAC;UAC7D,OAAO;YAAE,GAAGL,CAAC;YAAEK,GAAG,EAAE;UAAC,CAAE,CAAC,CAAC;;QAE3B,OAAO;UAAE,GAAGL,CAAC;UAAEK,GAAG,EAAEG,MAAM,CAACR,CAAC,CAACK,GAAG;QAAC,CAAE,CAAC,CAAC;MACvC,CAAC,CAAC;IACJ,CAAC,CAAC,EACFnB,GAAG,CAACa,SAAS,IAAG;MACdE,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEH,SAAS,CAAC;MAC7C,IAAI,CAACP,gBAAgB,CAACiB,IAAI,CAACV,SAAS,CAAC;IACvC,CAAC,CAAC,CACH;EACL;EAEAW,oBAAoBA,CAACC,EAAU;IAC7B,OAAO,IAAI,CAACrB,IAAI,CAACO,GAAG,CAAW,GAAG,IAAI,CAACN,MAAM,IAAIoB,EAAE,EAAE,CAAC,CACnDb,IAAI,CACHX,GAAG,CAACyB,QAAQ,IAAG;MACbX,OAAO,CAACC,GAAG,CAAC,mBAAmBS,EAAE,gBAAgB,OAAOC,QAAQ,CAACP,GAAG,YAAYO,QAAQ,CAACP,GAAG,EAAE,CAAC;MAC/F;MACA,IAAIO,QAAQ,CAACP,GAAG,KAAKC,SAAS,IAAIM,QAAQ,CAACP,GAAG,KAAK,IAAI,IAAIE,KAAK,CAACC,MAAM,CAACI,QAAQ,CAACP,GAAG,CAAC,CAAC,EAAE;QACtFJ,OAAO,CAACC,GAAG,CAAC,yCAAyCU,QAAQ,CAACP,GAAG,EAAE,CAAC;QACpE,OAAO;UAAE,GAAGO,QAAQ;UAAEP,GAAG,EAAE;QAAC,CAAE,CAAC,CAAC;;MAElC,OAAO;QAAE,GAAGO,QAAQ;QAAEP,GAAG,EAAEG,MAAM,CAACI,QAAQ,CAACP,GAAG;MAAC,CAAE,CAAC,CAAC;IACrD,CAAC,CAAC,EACFnB,GAAG,CAAC0B,QAAQ,IAAG;MACbX,OAAO,CAACC,GAAG,CAAC,6BAA6BS,EAAE,sBAAsB,EAAEC,QAAQ,CAAC;MAE5E;MACA,MAAMb,SAAS,GAAG,IAAI,CAACP,gBAAgB,CAACqB,KAAK;MAC7C,MAAMC,KAAK,GAAGf,SAAS,CAACgB,SAAS,CAACf,CAAC,IAAIA,CAAC,CAACW,EAAE,KAAKA,EAAE,CAAC;MACnD,IAAIG,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBf,SAAS,CAACe,KAAK,CAAC,GAAGF,QAAQ;QAC3B,IAAI,CAACpB,gBAAgB,CAACiB,IAAI,CAAC,CAAC,GAAGV,SAAS,CAAC,CAAC;;IAE9C,CAAC,CAAC,CACH;EACL;EAEAiB,aAAaA,CAACJ,QAAkB;IAC9B,OAAO,IAAI,CAACtB,IAAI,CAAC2B,IAAI,CAAC,IAAI,CAAC1B,MAAM,EAAEqB,QAAQ,CAAC,CACzCd,IAAI,CAACZ,GAAG,CAAC,MAAM,IAAI,CAACS,mBAAmB,EAAE,CAAC,CAAC;EAChD;EAEAuB,iBAAiBA,CAACP,EAAU;IAC1B,OAAO,IAAI,CAACrB,IAAI,CAAC6B,MAAM,CAAC,GAAG,IAAI,CAAC5B,MAAM,IAAIoB,EAAE,EAAE,CAAC,CAC5Cb,IAAI,CAACZ,GAAG,CAAC,MAAM,IAAI,CAACS,mBAAmB,EAAE,CAAC,CAAC;EAChD;EAEAA,mBAAmBA,CAAA;IACjB,IAAI,CAACL,IAAI,CAACO,GAAG,CAAa,IAAI,CAACN,MAAM,CAAC,CAAC6B,SAAS,CAACrB,SAAS,IAAG;MAC3D;MACA,MAAMsB,iBAAiB,GAAGtB,SAAS,CAACZ,GAAG,CAACa,CAAC,IAAG;QAC1CC,OAAO,CAACC,GAAG,CAAC,+BAA+BF,CAAC,CAACG,GAAG,IAAIH,CAAC,CAACI,MAAM,gBAAgB,OAAOJ,CAAC,CAACK,GAAG,YAAYL,CAAC,CAACK,GAAG,EAAE,CAAC;QAC5G;QACA,IAAIL,CAAC,CAACK,GAAG,KAAKC,SAAS,IAAIN,CAAC,CAACK,GAAG,KAAK,IAAI,IAAIE,KAAK,CAACC,MAAM,CAACR,CAAC,CAACK,GAAG,CAAC,CAAC,EAAE;UACjEJ,OAAO,CAACC,GAAG,CAAC,yCAAyCF,CAAC,CAACK,GAAG,EAAE,CAAC;UAC7D,OAAO;YAAE,GAAGL,CAAC;YAAEK,GAAG,EAAE;UAAC,CAAE,CAAC,CAAC;;QAE3B,OAAO;UAAE,GAAGL,CAAC;UAAEK,GAAG,EAAEG,MAAM,CAACR,CAAC,CAACK,GAAG;QAAC,CAAE,CAAC,CAAC;MACvC,CAAC,CAAC;MAEFJ,OAAO,CAACC,GAAG,CAAC,oDAAoD,EAAEmB,iBAAiB,CAAC;MACpF,IAAI,CAAC7B,gBAAgB,CAACiB,IAAI,CAACY,iBAAiB,CAAC;IAC/C,CAAC,CAAC;EACJ;;;uBAnFWjC,eAAe,EAAAkC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAfrC,eAAe;MAAAsC,OAAA,EAAftC,eAAe,CAAAuC,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
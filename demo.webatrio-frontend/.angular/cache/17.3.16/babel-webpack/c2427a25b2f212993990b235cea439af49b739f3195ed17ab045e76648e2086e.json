{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PersonneService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080/api/personnes';\n    this.personnesSubject = new BehaviorSubject([]);\n    this.personnes$ = this.personnesSubject.asObservable();\n    this.rafraichirPersonnes();\n  }\n  obtenirToutesPersonnes() {\n    return this.http.get(this.apiUrl).pipe(tap(personnes => {\n      console.log('Personnes récupérées du serveur:', personnes);\n      this.personnesSubject.next(personnes);\n    }));\n  }\n  obtenirPersonneParId(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(tap(personne => {\n      console.log(`Personne récupérée par ID ${id}:`, personne);\n      // Mettre à jour la personne dans la liste locale si elle existe\n      const personnes = this.personnesSubject.value;\n      const index = personnes.findIndex(p => p.id === id);\n      if (index !== -1) {\n        personnes[index] = personne;\n        this.personnesSubject.next([...personnes]);\n      }\n    }));\n  }\n  creerPersonne(personne) {\n    return this.http.post(this.apiUrl, personne).pipe(tap(() => this.rafraichirPersonnes()));\n  }\n  supprimerPersonne(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(tap(() => this.rafraichirPersonnes()));\n  }\n  rafraichirPersonnes() {\n    this.http.get(this.apiUrl).subscribe(personnes => {\n      console.log('Rafraîchissement des personnes:', personnes);\n      this.personnesSubject.next(personnes);\n    });\n  }\n  static {\n    this.ɵfac = function PersonneService_Factory(t) {\n      return new (t || PersonneService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PersonneService,\n      factory: PersonneService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","PersonneService","constructor","http","apiUrl","personnesSubject","personnes$","asObservable","rafraichirPersonnes","obtenirToutesPersonnes","get","pipe","personnes","console","log","next","obtenirPersonneParId","id","personne","value","index","findIndex","p","creerPersonne","post","supprimerPersonne","delete","subscribe","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\samyl\\Desktop\\Web-Atrio-Test\\demo.webatrio-frontend\\src\\app\\services\\personne.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Personne } from '../models/personne.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PersonneService {\r\n  private apiUrl = 'http://localhost:8080/api/personnes';\r\n  private personnesSubject = new BehaviorSubject<Personne[]>([]);\r\n  public personnes$ = this.personnesSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.rafraichirPersonnes();\r\n  }\r\n\r\n  obtenirToutesPersonnes(): Observable<Personne[]> {\r\n    return this.http.get<Personne[]>(this.apiUrl)\r\n      .pipe(tap(personnes => {\r\n        console.log('Personnes récupérées du serveur:', personnes);\r\n        this.personnesSubject.next(personnes);\r\n      }));\r\n  }\r\n\r\n  obtenirPersonneParId(id: number): Observable<Personne> {\r\n    return this.http.get<Personne>(`${this.apiUrl}/${id}`)\r\n      .pipe(tap(personne => {\r\n        console.log(`Personne récupérée par ID ${id}:`, personne);\r\n        \r\n        // Mettre à jour la personne dans la liste locale si elle existe\r\n        const personnes = this.personnesSubject.value;\r\n        const index = personnes.findIndex(p => p.id === id);\r\n        if (index !== -1) {\r\n          personnes[index] = personne;\r\n          this.personnesSubject.next([...personnes]);\r\n        }\r\n      }));\r\n  }\r\n\r\n  creerPersonne(personne: Personne): Observable<any> {\r\n    return this.http.post(this.apiUrl, personne)\r\n      .pipe(tap(() => this.rafraichirPersonnes()));\r\n  }\r\n\r\n  supprimerPersonne(id: number): Observable<any> {\r\n    return this.http.delete(`${this.apiUrl}/${id}`)\r\n      .pipe(tap(() => this.rafraichirPersonnes()));\r\n  }\r\n  \r\n  rafraichirPersonnes(): void {\r\n    this.http.get<Personne[]>(this.apiUrl).subscribe(personnes => {\r\n      console.log('Rafraîchissement des personnes:', personnes);\r\n      this.personnesSubject.next(personnes);\r\n    });\r\n  }\r\n} "],"mappings":"AAEA,SAAqBA,eAAe,QAAQ,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;;;AAMpC,OAAM,MAAOC,eAAe;EAK1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJhB,KAAAC,MAAM,GAAG,qCAAqC;IAC9C,KAAAC,gBAAgB,GAAG,IAAIN,eAAe,CAAa,EAAE,CAAC;IACvD,KAAAO,UAAU,GAAG,IAAI,CAACD,gBAAgB,CAACE,YAAY,EAAE;IAGtD,IAAI,CAACC,mBAAmB,EAAE;EAC5B;EAEAC,sBAAsBA,CAAA;IACpB,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAa,IAAI,CAACN,MAAM,CAAC,CAC1CO,IAAI,CAACX,GAAG,CAACY,SAAS,IAAG;MACpBC,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEF,SAAS,CAAC;MAC1D,IAAI,CAACP,gBAAgB,CAACU,IAAI,CAACH,SAAS,CAAC;IACvC,CAAC,CAAC,CAAC;EACP;EAEAI,oBAAoBA,CAACC,EAAU;IAC7B,OAAO,IAAI,CAACd,IAAI,CAACO,GAAG,CAAW,GAAG,IAAI,CAACN,MAAM,IAAIa,EAAE,EAAE,CAAC,CACnDN,IAAI,CAACX,GAAG,CAACkB,QAAQ,IAAG;MACnBL,OAAO,CAACC,GAAG,CAAC,6BAA6BG,EAAE,GAAG,EAAEC,QAAQ,CAAC;MAEzD;MACA,MAAMN,SAAS,GAAG,IAAI,CAACP,gBAAgB,CAACc,KAAK;MAC7C,MAAMC,KAAK,GAAGR,SAAS,CAACS,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACL,EAAE,KAAKA,EAAE,CAAC;MACnD,IAAIG,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBR,SAAS,CAACQ,KAAK,CAAC,GAAGF,QAAQ;QAC3B,IAAI,CAACb,gBAAgB,CAACU,IAAI,CAAC,CAAC,GAAGH,SAAS,CAAC,CAAC;;IAE9C,CAAC,CAAC,CAAC;EACP;EAEAW,aAAaA,CAACL,QAAkB;IAC9B,OAAO,IAAI,CAACf,IAAI,CAACqB,IAAI,CAAC,IAAI,CAACpB,MAAM,EAAEc,QAAQ,CAAC,CACzCP,IAAI,CAACX,GAAG,CAAC,MAAM,IAAI,CAACQ,mBAAmB,EAAE,CAAC,CAAC;EAChD;EAEAiB,iBAAiBA,CAACR,EAAU;IAC1B,OAAO,IAAI,CAACd,IAAI,CAACuB,MAAM,CAAC,GAAG,IAAI,CAACtB,MAAM,IAAIa,EAAE,EAAE,CAAC,CAC5CN,IAAI,CAACX,GAAG,CAAC,MAAM,IAAI,CAACQ,mBAAmB,EAAE,CAAC,CAAC;EAChD;EAEAA,mBAAmBA,CAAA;IACjB,IAAI,CAACL,IAAI,CAACO,GAAG,CAAa,IAAI,CAACN,MAAM,CAAC,CAACuB,SAAS,CAACf,SAAS,IAAG;MAC3DC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEF,SAAS,CAAC;MACzD,IAAI,CAACP,gBAAgB,CAACU,IAAI,CAACH,SAAS,CAAC;IACvC,CAAC,CAAC;EACJ;;;uBA/CWX,eAAe,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAf9B,eAAe;MAAA+B,OAAA,EAAf/B,eAAe,CAAAgC,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
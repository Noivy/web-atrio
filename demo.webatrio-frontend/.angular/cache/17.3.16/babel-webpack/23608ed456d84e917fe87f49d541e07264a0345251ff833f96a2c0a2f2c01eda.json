{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PersonneService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080/api/personnes';\n    this.personnesSubject = new BehaviorSubject([]);\n    this.personnes$ = this.personnesSubject.asObservable();\n    this.rafraichirPersonnes();\n  }\n  // Fonction pour calculer l'âge à partir de la date de naissance\n  calculerAge(dateNaissance) {\n    if (!dateNaissance) return 0;\n    const dateNaissanceObj = new Date(dateNaissance);\n    const aujourdhui = new Date();\n    let age = aujourdhui.getFullYear() - dateNaissanceObj.getFullYear();\n    const mois = aujourdhui.getMonth() - dateNaissanceObj.getMonth();\n    if (mois < 0 || mois === 0 && aujourdhui.getDate() < dateNaissanceObj.getDate()) {\n      age--;\n    }\n    return age;\n  }\n  obtenirToutesPersonnes() {\n    return this.http.get(this.apiUrl).pipe(map(personnes => {\n      return personnes.map(p => {\n        const personneCorrigee = {\n          ...p\n        };\n        if (p.age === undefined || p.age === null || isNaN(Number(p.age)) || Number(p.age) === 0) {\n          personneCorrigee.age = this.calculerAge(p.dateNaissance);\n        } else {\n          personneCorrigee.age = Number(p.age);\n        }\n        if (!Array.isArray(p.emploisActuels)) {\n          personneCorrigee.emploisActuels = [];\n        }\n        return personneCorrigee;\n      });\n    }), tap(personnes => {\n      this.personnesSubject.next(personnes);\n    }));\n  }\n  obtenirPersonnesParEntreprise(nomEntreprise) {\n    const url = `${this.apiUrl}/entreprise/${encodeURIComponent(nomEntreprise)}`;\n    return this.http.get(url).pipe(map(personnes => {\n      return personnes.map(p => {\n        const personneCorrigee = {\n          ...p\n        };\n        if (p.age === undefined || p.age === null || isNaN(Number(p.age)) || Number(p.age) === 0) {\n          personneCorrigee.age = this.calculerAge(p.dateNaissance);\n        } else {\n          personneCorrigee.age = Number(p.age);\n        }\n        if (!Array.isArray(p.emploisActuels)) {\n          personneCorrigee.emploisActuels = [];\n        }\n        return personneCorrigee;\n      });\n    }));\n  }\n  obtenirPersonneParId(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(map(personne => {\n      const personneCorrigee = {\n        ...personne\n      };\n      if (personne.age === undefined || personne.age === null || isNaN(Number(personne.age)) || Number(personne.age) === 0) {\n        personneCorrigee.age = this.calculerAge(personne.dateNaissance);\n      } else {\n        personneCorrigee.age = Number(personne.age);\n      }\n      if (!Array.isArray(personne.emploisActuels)) {\n        personneCorrigee.emploisActuels = [];\n      }\n      return personneCorrigee;\n    }), tap(personne => {\n      const personnes = this.personnesSubject.value;\n      const index = personnes.findIndex(p => p.id === id);\n      if (index !== -1) {\n        personnes[index] = personne;\n        this.personnesSubject.next([...personnes]);\n      }\n    }));\n  }\n  creerPersonne(personne) {\n    return this.http.post(this.apiUrl, personne).pipe(tap(() => this.rafraichirPersonnes()));\n  }\n  supprimerPersonne(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(tap(() => this.rafraichirPersonnes()));\n  }\n  rafraichirPersonnes() {\n    this.http.get(this.apiUrl).subscribe({\n      next: personnes => {\n        const personnesTraitees = personnes.map(p => {\n          const personneCorrigee = {\n            ...p\n          };\n          if (p.age === undefined || p.age === null || isNaN(Number(p.age)) || Number(p.age) === 0) {\n            personneCorrigee.age = this.calculerAge(p.dateNaissance);\n          } else {\n            personneCorrigee.age = Number(p.age);\n          }\n          if (!Array.isArray(p.emploisActuels)) {\n            personneCorrigee.emploisActuels = [];\n          }\n          return personneCorrigee;\n        });\n        this.personnesSubject.next(personnesTraitees);\n      },\n      error: () => {}\n    });\n  }\n  obtenirPersonnesAvecEmplois() {\n    const url = `${this.apiUrl}/avec-emplois`;\n    return this.http.get(url).pipe(map(personnes => this.normaliserPersonnes(personnes)));\n  }\n  normaliserPersonnes(personnes) {\n    return personnes.map(p => {\n      const personneCorrigee = {\n        ...p\n      };\n      if (p.age === undefined || p.age === null || isNaN(Number(p.age)) || Number(p.age) === 0) {\n        personneCorrigee.age = this.calculerAge(p.dateNaissance);\n      } else {\n        personneCorrigee.age = Number(p.age);\n      }\n      if (!Array.isArray(p.emploisActuels)) {\n        personneCorrigee.emploisActuels = [];\n      }\n      return personneCorrigee;\n    });\n  }\n  static {\n    this.ɵfac = function PersonneService_Factory(t) {\n      return new (t || PersonneService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PersonneService,\n      factory: PersonneService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","map","PersonneService","constructor","http","apiUrl","personnesSubject","personnes$","asObservable","rafraichirPersonnes","calculerAge","dateNaissance","dateNaissanceObj","Date","aujourdhui","age","getFullYear","mois","getMonth","getDate","obtenirToutesPersonnes","get","pipe","personnes","p","personneCorrigee","undefined","isNaN","Number","Array","isArray","emploisActuels","next","obtenirPersonnesParEntreprise","nomEntreprise","url","encodeURIComponent","obtenirPersonneParId","id","personne","value","index","findIndex","creerPersonne","post","supprimerPersonne","delete","subscribe","personnesTraitees","error","obtenirPersonnesAvecEmplois","normaliserPersonnes","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\samyl\\Desktop\\Web-Atrio-Test\\demo.webatrio-frontend\\src\\app\\services\\personne.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { tap, map } from 'rxjs/operators';\r\nimport { Personne } from '../models/personne.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PersonneService {\r\n  private apiUrl = 'http://localhost:8080/api/personnes';\r\n  private personnesSubject = new BehaviorSubject<Personne[]>([]);\r\n  public personnes$ = this.personnesSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.rafraichirPersonnes();\r\n  }\r\n\r\n  // Fonction pour calculer l'âge à partir de la date de naissance\r\n  private calculerAge(dateNaissance: string): number {\r\n    if (!dateNaissance) return 0;\r\n    \r\n    const dateNaissanceObj = new Date(dateNaissance);\r\n    const aujourdhui = new Date();\r\n    \r\n    let age = aujourdhui.getFullYear() - dateNaissanceObj.getFullYear();\r\n    const mois = aujourdhui.getMonth() - dateNaissanceObj.getMonth();\r\n    \r\n    if (mois < 0 || (mois === 0 && aujourdhui.getDate() < dateNaissanceObj.getDate())) {\r\n      age--;\r\n    }\r\n    \r\n    return age;\r\n  }\r\n\r\n  obtenirToutesPersonnes(): Observable<Personne[]> {\r\n    return this.http.get<Personne[]>(this.apiUrl)\r\n      .pipe(\r\n        map(personnes => {\r\n          return personnes.map(p => {\r\n            const personneCorrigee: Personne = { ...p };\r\n            \r\n            if (p.age === undefined || p.age === null || isNaN(Number(p.age)) || Number(p.age) === 0) {\r\n              personneCorrigee.age = this.calculerAge(p.dateNaissance);\r\n            } else {\r\n              personneCorrigee.age = Number(p.age);\r\n            }\r\n            \r\n            if (!Array.isArray(p.emploisActuels)) {\r\n              personneCorrigee.emploisActuels = [];\r\n            }\r\n            \r\n            return personneCorrigee;\r\n          });\r\n        }),\r\n        tap(personnes => {\r\n          this.personnesSubject.next(personnes);\r\n        })\r\n      );\r\n  }\r\n\r\n  obtenirPersonnesParEntreprise(nomEntreprise: string): Observable<Personne[]> {\r\n    const url = `${this.apiUrl}/entreprise/${encodeURIComponent(nomEntreprise)}`;\r\n    \r\n    return this.http.get<Personne[]>(url)\r\n      .pipe(\r\n        map(personnes => {\r\n          return personnes.map(p => {\r\n            const personneCorrigee: Personne = { ...p };\r\n            \r\n            if (p.age === undefined || p.age === null || isNaN(Number(p.age)) || Number(p.age) === 0) {\r\n              personneCorrigee.age = this.calculerAge(p.dateNaissance);\r\n            } else {\r\n              personneCorrigee.age = Number(p.age);\r\n            }\r\n            \r\n            if (!Array.isArray(p.emploisActuels)) {\r\n              personneCorrigee.emploisActuels = [];\r\n            }\r\n            \r\n            return personneCorrigee;\r\n          });\r\n        })\r\n      );\r\n  }\r\n\r\n  obtenirPersonneParId(id: number): Observable<Personne> {\r\n    return this.http.get<Personne>(`${this.apiUrl}/${id}`)\r\n      .pipe(\r\n        map(personne => {\r\n          const personneCorrigee: Personne = { ...personne };\r\n          \r\n          if (personne.age === undefined || personne.age === null || isNaN(Number(personne.age)) || Number(personne.age) === 0) {\r\n            personneCorrigee.age = this.calculerAge(personne.dateNaissance);\r\n          } else {\r\n            personneCorrigee.age = Number(personne.age);\r\n          }\r\n          \r\n          if (!Array.isArray(personne.emploisActuels)) {\r\n            personneCorrigee.emploisActuels = [];\r\n          }\r\n          \r\n          return personneCorrigee;\r\n        }),\r\n        tap(personne => {\r\n          const personnes = this.personnesSubject.value;\r\n          const index = personnes.findIndex(p => p.id === id);\r\n          if (index !== -1) {\r\n            personnes[index] = personne;\r\n            this.personnesSubject.next([...personnes]);\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  creerPersonne(personne: Personne): Observable<any> {\r\n    return this.http.post(this.apiUrl, personne)\r\n      .pipe(tap(() => this.rafraichirPersonnes()));\r\n  }\r\n\r\n  supprimerPersonne(id: number): Observable<any> {\r\n    return this.http.delete(`${this.apiUrl}/${id}`)\r\n      .pipe(tap(() => this.rafraichirPersonnes()));\r\n  }\r\n  \r\n  rafraichirPersonnes(): void {\r\n    this.http.get<Personne[]>(this.apiUrl).subscribe({\r\n      next: (personnes) => {\r\n        const personnesTraitees = personnes.map(p => {\r\n          const personneCorrigee: Personne = { ...p };\r\n          \r\n          if (p.age === undefined || p.age === null || isNaN(Number(p.age)) || Number(p.age) === 0) {\r\n            personneCorrigee.age = this.calculerAge(p.dateNaissance);\r\n          } else {\r\n            personneCorrigee.age = Number(p.age);\r\n          }\r\n          \r\n          if (!Array.isArray(p.emploisActuels)) {\r\n            personneCorrigee.emploisActuels = [];\r\n          }\r\n          \r\n          return personneCorrigee;\r\n        });\r\n        \r\n        this.personnesSubject.next(personnesTraitees);\r\n      },\r\n      error: () => {}\r\n    });\r\n  }\r\n\r\n  obtenirPersonnesAvecEmplois(): Observable<Personne[]> {\r\n    const url = `${this.apiUrl}/avec-emplois`;\r\n    \r\n    return this.http.get<Personne[]>(url)\r\n      .pipe(\r\n        map(personnes => this.normaliserPersonnes(personnes))\r\n      );\r\n  }\r\n  \r\n  private normaliserPersonnes(personnes: Personne[]): Personne[] {\r\n    return personnes.map(p => {\r\n      const personneCorrigee: Personne = { ...p };\r\n      \r\n      if (p.age === undefined || p.age === null || isNaN(Number(p.age)) || Number(p.age) === 0) {\r\n        personneCorrigee.age = this.calculerAge(p.dateNaissance);\r\n      } else {\r\n        personneCorrigee.age = Number(p.age);\r\n      }\r\n      \r\n      if (!Array.isArray(p.emploisActuels)) {\r\n        personneCorrigee.emploisActuels = [];\r\n      }\r\n      \r\n      return personneCorrigee;\r\n    });\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}